// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  currentTeamId String?
  weekStart     WeekStart
  isPlaceholder Boolean   @default(false)
  isActive      Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentTeam        Organizations?           @relation("UserCurrentTeam", fields: [currentTeamId], references: [id], onDelete: SetNull)
  ownedOrganizations Organizations[]          @relation("OrganizationOwner")
  members            Member[]
  invitations        OrganizationInvitation[]
}

enum WeekStart {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  PLACEHOLDER
}

model Organizations {
  id                           String   @id @default(cuid())
  userId                       String
  name                         String
  personalTeam                 Boolean
  dateFormat                   String
  currency                     String
  employeesCanSeeBillableRates Boolean  @default(false)
  billableRates                Decimal?
  intervalFormat               String
  timeFormat                   String
  numberFormat                 String
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  currentTeamUsers User[]                   @relation("UserCurrentTeam")
  owner            User                     @relation("OrganizationOwner", fields: [userId], references: [id], onDelete: Restrict)
  members          Member[]
  invitations      OrganizationInvitation[]
}

model Member {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  billableRate   Decimal?
  role           Role     @default(EMPLOYEE)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  role           Role             @default(EMPLOYEE)
  invitedBy      String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  resendCount Int @default(0)
  lastReSentAt DateTime?

  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
}

enum InvitationStatus {
  PENDING
  EXPIRED
}
